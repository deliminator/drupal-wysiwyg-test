/* repositorytests.js is part of Aloha Editor project http://aloha-editor.org
 *
 * Aloha Editor is a WYSIWYG HTML5 inline editing library and editor. 
 * Copyright (c) 2010-2012 Gentics Software GmbH, Vienna, Austria.
 * Contributors http://aloha-editor.org/contribution.php 
 * 
 * Aloha Editor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * Aloha Editor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * 
 * As an additional permission to the GNU GPL version 2, you may distribute
 * non-source (e.g., minimized or compacted) forms of the Aloha-Editor
 * source code without the copy of the GNU GPL normally required,
 * provided you include this license notice and a URL through which
 * recipients can access the Corresponding Source.
 */

define([],function(){function e(e){return e.replace(/\s+/g," ")}function t(){if(d.length){var e=d.shift();typeof e=="function"&&e()}}function n(e){module("Basic Tests"),test("Test Aloha.RepositoryManager startup state",function(){equal(h.repositories.length,0,"Check that repository manager contains 0 registered repository."),new(p.extend({_constructor:function(){this._super(f,"testRepository1Name")},query:function(e,t){var n=e&&typeof e.delay=="number"?e.delay:0;setTimeout(function(){var n=[];if(e&&e.maxItems){var r=e.maxItems+1;while(--r)n.push({})}t(n)},n)},getChildren:function(e,t){var n=e&&typeof e.delay=="number"?e.delay:0;setTimeout(function(){var n=[];if(e&&e.maxItems){var r=e.maxItems+1;while(--r)n.push({})}t(n)},n)}}))}),test("Test registering of repository",function(){equal(h.repositories.length,1,"Check that repository manager contains 1 registered repository."),equal(h.repositories[0]&&h.repositories[0].repositoryId,f,'Check that the id of the first registered repository is "'+
f+'."'),t()})}function r(){module("getChildren tests (single repository)"),asyncTest("Test timeouts for getChildren method",function(){var n=new Date;h.getChildren({delay:c+1e3},function(r){var i=new Date-n,s=20;ok(i-c<s,e("												  							Check that the repository manager times-out on a  							repository that was taking more than the allowed  							"+c+" +/= "+s+" milliseconds to 							fullfill a getChildren call.\nThis callback was	  							invoked after "+i+" milliseconds.		  						")),ok(i>=c,e("												  							Check that repository manager waited at least the 							expected "+c+" milliseconds for		  							repositories to respond before automatically	  							invoking the callback function.\nThe manager	  							waited "+i+" milliseconds.			  						")),n=new Date,h.getChildren({delay:c/2},function(r){var i=new Date-n;ok(i<c,e("Check that the repository manager invoked	  								this callback before the timeout was reached. 								\nThis callback was invoked after "+i+" milliseconds."
)),start(),t()})})})}function i(){module("Query timeout tests (single repository)"),asyncTest("Test timeouts for Aloha.RepositoryManager.query method",function(){var n=new Date;h.query({delay:c+1e3},function(r){var i=new Date-n,s=20;ok(i-c<s,e("												  							Check that the repository manager times-out on a  							repository that was taking more than the allowed  							"+c+" +/= "+s+" milliseconds to 							fulfill the query method.\nThis callback was	  							invoked after "+i+" milliseconds.		  						")),ok(i>=c,e("												  							Check that repository manager waited at least the 							expected "+c+" milliseconds for		  							repositories to respond before automatically	  							invoking the callback function.\nThe manager	  							waited "+i+" milliseconds.			  						")),n=new Date,h.query({delay:c/2},function(r){var i=new Date-n;ok(i<c,e("Check that the repository manager invoked	  								this callback before the timeout was reached. 								\nThis callback was invoked after "+
i+" milliseconds.")),start(),t()})})})}function s(){module("Query response tests (single repository)"),asyncTest("Test response object for Aloha.RepositoryManager.query method",function(){h.query({maxItems:0},function(e){ok(e&&typeof e=="object","Check that repository manager returns a response object."),equal(e.results,0,"Check that the response object contains 0 results."),equal(e.items.length,0,'Check that the response object\'s "items" property is an empty array.');var n=Math.round(Math.random()*100);h.query({maxItems:n},function(e){equal(e.results,n,'Check that response object contains "'+n+'" results.'),equal(e.results,e.items.length,'Check that the "results" property matches the length of the "items" array in the response object.'),start(),t()})})})}function o(){asyncTest("Tests for overlapping queries (single repository)",function(){var e=new Date,n=0;++n,stop(),h.query({delay:c+2e3,maxItems:3},function(t){equal(t.results,0,"Check that response object contains 0 results because it timed-out @ "+
(new Date-e)+"."),--n,equal(n,1,"Check that there is still 1 more query open."),start()}),++n,stop(),setTimeout(function(){h.query({delay:c-100,maxItems:2},function(r){equal(r.results,2,"Check that the response object contains 2 results @"+(new Date-e)+"."),--n,equal(n,0,"Check that this is the last query to be closed (ie: there are 0 opened queries)."),start(),t()})},c-500),++n,stop(),h.query({maxItems:4},function(t){equal(t.results,4,"Check that response object returns the results for the correct callback @ "+(new Date-e)+"."),--n,equal(n,2,"Check that there are 2 more queries still open."),start()}),start()})}function u(){new(p.extend({_constructor:function(){this._super(l,"testRepository2Name")},query:function(e,t){t([{}])}})),module("Query TESTS: MULTIPLE REPOSITORIES"),test("Test that we have 2 repositories registered",function(){equal(h.repositories.length,2,"Check that repository manager contains 2 registered repositories."),equal(h.repositories[1]&&h.repositories[1].repositoryId
,l,'Check that the id of the second registered repository is "'+l+'."'),equal(h.repositories[0]&&h.repositories[0].repositoryId,f,'Check that the id of the first registered repository is still "'+f+'."'),start()}),asyncTest("Test queries to multiple repositories through the repository manager",function(){stop(),h.query({maxItems:2},function(e){equal(e.results,3,"Check that a total of 2 + 1 results are returned from the 2 registered repositories"),start()}),stop(),h.query({delay:c+500,maxItems:5},function(e){equal(e.results,1,"Check that only 1 result is returned because 1 of the 2 repos timed-out."),equal(e.items[0].repositoryId,"testRepo2","Check that the results only include those from the second repository returned results."),start()}),start()})}function a(){var e=!1;new(p.extend({_constructor:function(){this._super(l,"testRepository2Name")},query:function(e,t){t([{}])},init:function(){e=!0}})),module("Initialization TEST: CHECK IF INITIALIZED"),test("Test that we have 2 repositories registered"
,function(){equal(e,!0,"Check that repository has initialized"),start()})}var f="testRepo1",l="testRepo2",c=5e3,h,p,d=[n,r,i,s,o,a];asyncTest("Aloha.require repository modules.",function(){var e=setTimeout(function(){ok(!1,"Aloha was not initialized within 60 seconds"),start()},1e4);Aloha.require(["aloha/repository","aloha/repositorymanager"],function(n,r){h=r,p=n,Aloha.ready(t),clearTimeout(e),ok(!0,"Aloha Event was fired"),start()})})})