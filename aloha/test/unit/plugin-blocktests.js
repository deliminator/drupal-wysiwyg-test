/* plugin-blocktests.js is part of Aloha Editor project http://aloha-editor.org
 *
 * Aloha Editor is a WYSIWYG HTML5 inline editing library and editor. 
 * Copyright (c) 2010-2012 Gentics Software GmbH, Vienna, Austria.
 * Contributors http://aloha-editor.org/contribution.php 
 * 
 * Aloha Editor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * Aloha Editor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * 
 * As an additional permission to the GNU GPL version 2, you may distribute
 * non-source (e.g., minimized or compacted) forms of the Aloha-Editor
 * source code without the copy of the GNU GPL normally required,
 * provided you include this license notice and a URL through which
 * recipients can access the Corresponding Source.
 */

define(["testutils","htmlbeautifier"],function(e){Aloha.ready(function(){var e=Aloha.jQuery,t=e("#block-outer-container"),n,r,i=[{always:!0,async:!0,desc:"Aloha Dependency Loader",assertions:1,operation:function(){var e=setTimeout(function(){ok(!1,"Aloha was not initialized within 10 seconds. Aborting!"),start()},1e4);Aloha.require(["block/blockmanager"],function(t){r=t,clearTimeout(e),ok(!0,"Alohoha Dependencies were loaded"),start()})}},{module:"Initialization"},{desc:"A default block is initialized correctly",start:'<div id="myDefaultBlock">Some default block content</div>',assertions:8,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var r=e(".aloha-block",t);strictEqual(r.attr("contenteditable"),"false","The block div is contenteditable=false."),ok(r.hasClass("aloha-block"),"The block div has the aloha-block CSS class."),ok(r.hasClass("aloha-block-DefaultBlock"),"The block div has the aloha-block-DefaultBlock CSS class."),strictEqual(r.attr
("data-aloha-block-type"),"DefaultBlock","The block div wrapper has the data-aloha-block-type set correctly."),equal(r.attr("data-block-type"),undefined,"The block div wrapper does not have data-block-type set, as it shall not be used anymore by the framework."),ok(r.is("#myDefaultBlock"),"The given ID is re-used."),ok(r.find(".aloha-block-handle"),"The handles are added."),ok(r.html().match(/Some default block content/),"The block content is still there.")}},{desc:"Data attributes from inside the element are available through the attr() notation",start:'<div id="myDefaultBlock" data-foo="Bar" data-somePropertyWithUppercase="test2">Some default block content2</div>',assertions:2,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var i=r.getBlock(e("#myDefaultBlock",t));strictEqual(i.attr("foo"),"Bar"),strictEqual(i.attr("somepropertywithuppercase"),"test2","Uppercase properties need to be converted to lowercase.")}},{desc:"Attributes passed to .alohaBlock() are preserved. The data-attributes take precedence, however"
,start:'<div id="myDefaultBlock" data-baz="original">Some default block content2</div>',assertions:2,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock",foo:"someBar",baz:"Override"});var i=r.getBlock(e("#myDefaultBlock",t));strictEqual(i.attr("foo"),"someBar"),strictEqual(i.attr("baz"),"original")}},{exclude:!0,desc:"Inline JavaScript is only executed once, and not executed while blockifying an element",setup:function(e){window.thisTestExecutionCount=0,e[0].innerHTML='<div id="myDefaultBlock">Some default block contesnt<script type="text/javascript">window.thisTestExecutionCount++;</script></div>'},assertions:1,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"}),strictEqual(window.thisTestExecutionCount,0),delete window.thisTestExecutionCount}},{desc:"Attached event handlers are not removed",start:'<div id="myDefaultBlock" data-foo="Bar" data-somePropertyWithUppercase="test2">Some default block content2</div>'
,assertions:1,operation:function(t,n){e("#myDefaultBlock").click(function(){ok(!0)}),e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"}),e("#myDefaultBlock").click()}},{desc:"Trying to create a block from an element which is no div or span throws error",start:'<img id="myDefaultBlock" />',assertions:1,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"}),strictEqual(e(".aloha-block",t).length,0,"Image object has been blockified, although this should not happen.")}},{module:"Block API"},{exclude:!1,desc:"fetching attr() with uppercase key is the same as with lowercase key",start:'<div id="myDefaultBlock" data-foo="Bar">Some default block content</div>',operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var i=r.getBlock(e("#myDefaultBlock",t));strictEqual(i.attr("foo"),"Bar"),strictEqual(i.attr("FoO"),"Bar")}},{exclude:!1,desc:"setting attr() with uppercase key is the same as with lowercase key"
,start:'<div id="myDefaultBlock" data-foo="Bar">Some default block content</div>',assertions:1,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var i=r.getBlock(e("#myDefaultBlock",t));i.attr("test","mytest1"),i.attr("TeSt","mytest2"),strictEqual(i.attr("test"),"mytest2")}},{exclude:!1,desc:'setting a key with attr() which starts with "aloha-block-" throws an error and does not save the key',start:'<div id="myDefaultBlock" data-foo="Bar">Some default block content</div>',assertions:2,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var i=r.getBlock(e("#myDefaultBlock",t));i.attr("aloha-block-test1","foo"),strictEqual(i.attr("aloha-block-test1"),undefined),i.attr("aloha-block-type","foo"),strictEqual(i.attr("aloha-block-type"),"DefaultBlock")}},{exclude:!1,desc:"Selection handling works with non-nested blocks",start:'<div id="block1">Some default block content</div> <div id="block2">Some default block content</div>'
,assertions:8,operation:function(t,n){e("#block1").alohaBlock({"aloha-block-type":"DefaultBlock"}),e("#block2").alohaBlock({"aloha-block-type":"DefaultBlock"});var i=r.getBlock(e("#block1",t)),s=r.getBlock(e("#block2",t));ok(!i.isActive(),"block 1 is not active"),ok(!s.isActive(),"block 2 is not active"),i.activate(),ok(!0,"--> activated block1"),ok(i.isActive(),"block 1 is active after activating it"),ok(!s.isActive(),"block 2 is not active after activating block1"),s.activate(),ok(!0,"--> activated block2"),ok(!i.isActive(),"block1 has been deactivated after activating block2"),ok(s.isActive(),"block 2 is active after activating it")}},{module:"BlockManager API"},{exclude:!1,desc:"getBlock returns block when passed the block ID, the inner or outer DOM element",start:'<div id="myDefaultBlock">Some default block content</div>',assertions:3,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var i=r.getBlock(e(".aloha-block",t).attr("id")),s=r.getBlock
(e(".aloha-block",t)),o=r.getBlock(e("#myDefaultBlock",t));ok(i===s),ok(s===o),strictEqual(typeof i,"object","Blocks were no objects")}},{exclude:!1,desc:"getBlock returns undefined when passed a wrong ID",start:'<div id="myDefaultBlock">Some default block content</div>',assertions:1,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"}),strictEqual(undefined,r.getBlock("someUndefinedId"))}},{module:"Drag/Drop helpers"},{exclude:!1,desc:"DragDrop handlers",start:'<div id="myDefaultBlock">Some default block content</div>',assertions:7,operation:function(t,n){e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var i=r.getBlock(e("#myDefaultBlock",t));deepEqual(i._dd_splitText("Hello world"),["Hello"," world"]),deepEqual(i._dd_splitText("Hello world "),["Hello"," world "]),deepEqual(i._dd_splitText(" Hello world"),[" Hello"," world"]),deepEqual(i._dd_splitText(" Hello, world"),[" Hello",", ","world"]),deepEqual(i._dd_splitText(" Hello, world!"
),[" Hello",", ","world","!"]),deepEqual(i._dd_splitText(" Hello, world..."),[" Hello",", ","world","..."]),deepEqual(i._dd_splitText(" Hello, world ..."),[" Hello",", ","world"," ..."])}},{module:"Copy/Paste"},{exclude:!1,desc:"Copy/Paste Setup",start:'<div class="alohaContent"><p><b>Some</b> text before<span id="myDefaultBlock" data-foo="Bar" data-something="Bar">Please click me and press <b>ctrl/cmd+c</b></span>Some text after</p><p class="pasteTarget"><b>Please place the</b> cursor HERE &gt;&lt; and press cmd/crtl v</p><p><b>Some</b> more text</p></div>',async:!0,operation:function(t,n){e(".alohaContent").aloha(),e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var r=window.setTimeout(function(){test("Copy/Paste tests not run",function(){ok(!1,"Manual copy/paste tests were not run")}),start()},1e4),i;i=function(n){n.which===86&&(window.setTimeout(function(){window.clearTimeout(r);var n=[{actual:function(){var n=0;return e("span",t).each(function(){e(this).is("#myDefaultBlock"
)&&n++}),n}(),expected:1,message:"the old ID should not be inside the DOM multiple after pasting"},{actual:e(".aloha-block",t)[0].innerHTML.toLowerCase(),expected:'<span class="aloha-block-handle aloha-block-draghandle"></span>Please click me and press <b>ctrl/cmd+c</b>'.toLowerCase(),message:"The block markup is as expected"},{actual:e("br",t).length,expected:0,message:"The content should not have any superfluous <br> tags inserted"}];test("Copy/Paste works with inline blocks",function(){e.each(n,function(){strictEqual(this.actual,this.expected,this.message)})}),start()},400),e(document).unbind("keydown",i))},e(document).keydown(i)}},{module:"Cut/Paste"},{exclude:!1,desc:"Cut/Paste Setup",start:'<div class="alohaContent"><p class="src"><b>Some</b> text before<span id="myDefaultBlock" data-foo="Bar" data-something="Bar">Please click me and press<b>ctrl/cmd+x (CUT)</b></span>Some text after</p><p class="pasteTarget"><b>Please place the</b> cursor HERE &gt;&lt; and press cmd/crtl v</p><p><b>Some</b> more text</p></div>'
,async:!0,operation:function(t,n){e(".alohaContent").aloha(),e("#myDefaultBlock").alohaBlock({"aloha-block-type":"DefaultBlock"});var r=window.setTimeout(function(){test("Cut/Paste tests not run",function(){ok(!1,"Manual cut/paste tests were not run")}),start()},1e4),i;i=function(n){n.which===86&&(window.setTimeout(function(){window.clearTimeout(r);var n=[{actual:function(){var n=0;return e("span",t).each(function(){e(this).is("#myDefaultBlock")&&n++}),n}(),expected:0,message:"the old ID should not be inside the DOM anymore after cutting"},{actual:e(".aloha-block",t)[0].innerHTML.toLowerCase(),expected:'<span class="aloha-block-handle aloha-block-draghandle"></span>Please click me and press<b>ctrl/cmd+x (CUT)</b>'.toLowerCase(),message:"The block markup is as expected"},{actual:e("br",t).length,expected:0,message:"The content should not have any superfluous <br> tags inserted"},{actual:e("p.src",t).html().toLowerCase(),expected:"<b>Some</b> text beforeSome text after".toLowerCase(),message
:"The element should be removed from the source"}];test("Cut/Paste works with inline blocks",function(){e.each(n,function(){strictEqual(this.actual,this.expected,this.message)})}),start()},400),e(document).unbind("keydown",i))},e(document).keydown(i)}},{exclude:!0}],s=null;for(var o=0;o<i.length;o++)i[o].only===!0&&(s=o);e.each(i,function(e,n){if(s!==null&&s!==e&&!n.always)return;if(n.exclude===!0)return;if(n.module){module(n.module.toUpperCase()+" :");return}test((n.desc||"Test").toUpperCase(),n.assertions,function(){n.setup?n.setup(t):t.html(n.start),n.async===!0&&stop(),typeof n.operation=="function"&&n.operation(t,n)})})})})